!!!5
html
  head
    title Amoebadome: The Microbial Deathmatch!
    link(rel="stylesheet" type="text/css" href="css/main.css")
    script(data-main="js/app.js", src="vendor/require.js")
    script(type="x-shader/x-vertex" id="enemy-vertex").
      #define M_PI 3.14159265358979

      uniform float time;
      uniform vec3 color;
      uniform vec3 movement;
      varying float intensity;
      //varying goes to both shaders
      //attribute is vertex shader
      void main(){          
          vec3 tangentNorm = normalize(normalMatrix * normal);
          vec3 viewNorm = normalize(normalMatrix * vec3(0.0, 1.0, 0.0));
          intensity = pow(1.0 - dot(tangentNorm, viewNorm), 1.5);
          
          float speed = length(movement);
          float normSpeed = speed / 50.0;
          float influence = dot(normalize(position), movement / speed);
          float bias = dot(normalize(position), vec3(1.0, 0.0, 0.0));
          vec3 scaledMove = movement * influence;

          vec3 idleOffset = normal + 0.5 * (sin((time + bias) * 4.0));
          idleOffset.x = 0.0;

          vec3 moveOffset = (scaledMove / 4.0) * abs(sin((time + influence) * normSpeed));

          vec3 newPos = position + mix(idleOffset, moveOffset, normSpeed);

          gl_Position = projectionMatrix *
                modelViewMatrix *
                vec4(newPos, 1.0);
      }

    script(type="x-shader/x-vertex" id="movement-vertex").
      #define M_PI 3.14159265358979

      uniform float time;
      uniform vec3 color;
      uniform float movement;
      varying float intensity;
      //varying goes to both shaders
      //attribute is vertex shader
      void main(){          
          vec3 tangentNorm = normalize(normalMatrix * normal);
          vec3 viewNorm = normalize(normalMatrix * vec3(0.0, 1.0, 0.0));
          intensity = pow(1.0 - dot(tangentNorm, viewNorm), 1.5);
          
          vec3 move = movement * vec3(1.0, 0.0, 0.0);
          float normSpeed = movement / 50.0;
          float influence = dot(normalize(position), move / movement);
          float bias = dot(normalize(position), vec3(1.0, 0.0, 0.0));
          vec3 scaledMove = move * influence;

          vec3 idleOffset = normal + 0.5 * (sin((time + bias) * 4.0));
          idleOffset.x = 0.0;

          vec3 moveOffset = (scaledMove / 4.0) * abs(sin((time + influence) * normSpeed));

          vec3 newPos = position + mix(idleOffset, moveOffset, normSpeed);

          gl_Position = projectionMatrix *
                modelViewMatrix *
                vec4(newPos, 1.0);
      }
    script(type="x-shader/x-fragment" id="movement-fragment").
        varying float intensity;
        uniform vec3 color;

        void main(){
          vec3 glow = color * intensity;
          glow += color * 0.1;
          gl_FragColor = vec4(glow, 1.0);
        }
  body
    div(id="amoeba")
      div(id="interface")
    script(type="game/interface", name="HUD").
      <div data-bind="playerData" class="hud">
        <div class="health-container">
          <div class="health-bar" data-property="health as width" data-watch>
            <h3 data-property="health" data-watch></h3>
          </div>
        </div>
        <div class="point-container">
          <div class="point-gauge" data-property="points as height" data-watch>
            <img src="/images/dna-icon-ov.png">
          </div>
        </div>
      </div>
